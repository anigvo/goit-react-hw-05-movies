{"version":3,"file":"static/js/247.5dc9419c.chunk.js","mappings":"uMAwEA,UAnEa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,WAAS,GAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAA4BN,EAAAA,EAAAA,WAAS,GAArC,eAAOO,EAAP,KAAeC,EAAf,KACMC,EAAO,6CAAyCX,EAAzC,2BA0Bb,OAzBAY,EAAAA,EAAAA,YAAU,WACR,GAAIP,EAAS,CASXQ,EAAAA,EAAAA,IACOF,EATS,CACdG,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,gOAKHC,MAAK,SAAAC,GACJX,EAAQW,EAASC,KAAKb,MACtBD,GAAW,GACXI,GAAU,EACX,IACAW,OAAM,SAAAlB,GACLC,GAAS,GACTE,GAAW,GACXI,GAAU,EACX,GACJ,CACF,GAAE,CAACC,EAASN,KAGX,8BACII,GA2BA,SAAC,IAAD,IA1BAN,GACE,8BAAE,oBACgB,IAAhBI,EAAKe,QACP,uBAAG,8CAEH,wBACGf,EAAKgB,KAAI,SAAAC,GAAK,OACb,0BACGA,EAAMC,cACL,gBACEC,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAKH,EAAMI,iBAGb,gBACEF,IAAG,0DACHC,IAAKH,EAAMI,iBAGf,uBAAIJ,EAAMI,iBACV,yBAAG,cAAYJ,EAAMK,eAbdL,EAAMM,GADF,OAwB1B,C","sources":["components/Cast/Cast.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport Loader from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [cast, setCast] = useState([]);\n  const [loader, setLoader] = useState(true);\n  const castUrl = `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`;\n  useEffect(() => {\n    if (loading) {\n      const options = {\n        method: 'GET',\n        headers: {\n          accept: 'application/json',\n          Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkZjBjOWZhNTA0MDcxMTlhOWY3MWZlMTUwMGRjZWUxMCIsInN1YiI6IjY0OWYwODcwNmY2YTk5MDEzYTg5ZjQwYyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.CNFILj_LKfHuzNXrxVFMlOf4mJknB8NFdiCkmm6wFOY',\n        },\n      };\n      axios\n        .get(castUrl, options)\n        .then(response => {\n          setCast(response.data.cast);\n          setLoading(false);\n          setLoader(false);\n        })\n        .catch(error => {\n          setError(true);\n          setLoading(false);\n          setLoader(false);\n        });\n    }\n  }, [castUrl, loading]);\n\n  return (\n    <>\n      {!loader ? (\n        error ? (\n          <>Ops! Not found!</>\n        ) : cast.length === 0 ? (\n          <p>We don't have any actors for this movie.</p>\n        ) : (\n          <ul>\n            {cast.map(actor => (\n              <li key={actor.id}>\n                {actor.profile_path ? (\n                  <img\n                    src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                    alt={actor.original_name}\n                  />\n                ) : (\n                  <img\n                    src={`https://www.redwaterschool.ca/all_img/default-staff.png`}\n                    alt={actor.original_name}\n                  />\n                )}\n                <p>{actor.original_name}</p>\n                <p>Character: {actor.character}</p>\n              </li>\n            ))}\n          </ul>\n        )\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["movieId","useParams","useState","error","setError","loading","setLoading","cast","setCast","loader","setLoader","castUrl","useEffect","axios","method","headers","accept","Authorization","then","response","data","catch","length","map","actor","profile_path","src","alt","original_name","character","id"],"sourceRoot":""}