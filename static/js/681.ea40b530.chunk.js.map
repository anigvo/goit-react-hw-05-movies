{"version":3,"file":"static/js/681.ea40b530.chunk.js","mappings":"qPA+DA,EA1DyB,SAAC,GAOnB,IANLA,EAMI,EANJA,QACAC,EAKI,EALJA,UACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,aACAC,EACI,EADJA,WAEMC,EAAc,IAAIC,KAAKN,GAAWO,cACxC,OACE,iCACE,4BACE,yBACGR,GACC,gBAAKS,IAAKT,EAASU,IAAKR,KAExB,uBAAG,4BAIP,4BACE,0BACGA,EAAU,KAAGI,EAAY,QAE5B,yBAAG,eAAaK,KAAKC,MAAiB,GAAXT,GAAX,WAElB,4BACE,wBAAI,cACJ,uBAAIC,QAEN,4BACE,wBAAI,YACJ,wBACGC,EAAWQ,KAAI,SAAAC,GAAK,OACnB,wBAAoBA,EAAMC,MAAjBD,EAAME,GADI,aAO3B,4BACE,uBAAG,4BACH,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAG,OAAT,SAAgB,YAElB,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,SAAmB,qBAIzB,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAIP,ECuBD,EA9EqB,WAAO,IAAD,IACjBC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOvB,EAAP,KAAgBwB,EAAhB,KACA,GAAiCD,EAAAA,EAAAA,UAAS,IAA1C,eAAOtB,EAAP,KAAkBwB,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOrB,EAAP,KAAkBwB,EAAlB,KACA,GAAgCH,EAAAA,EAAAA,UAAS,IAAzC,eAAOpB,EAAP,KAAiBwB,EAAjB,KACA,GAAwCJ,EAAAA,EAAAA,UAAS,IAAjD,eAAOnB,EAAP,KAAqBwB,EAArB,KACA,GAAoCL,EAAAA,EAAAA,UAAS,IAA7C,eAAOlB,EAAP,KAAmBwB,EAAnB,KACA,GAA0BN,EAAAA,EAAAA,WAAS,GAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,GAA8BR,EAAAA,EAAAA,WAAS,GAAvC,eAAOS,EAAP,KAAgBC,EAAhB,KACA,GAA4BV,EAAAA,EAAAA,WAAS,GAArC,eAAOW,EAAP,KAAeC,EAAf,KACMC,EAAW,6CAAyCf,EAAzC,mBAEXgB,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAwC7C,OAtCAC,EAAAA,EAAAA,YAAU,WACR,GAAIT,EAAS,CASXU,EAAAA,EAAAA,IACON,EATS,CACdO,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,gOAKHC,MAAK,SAAAC,GACAA,EAASC,KAAKC,YAChB1B,EAAW,kCAAD,OAC0BwB,EAASC,KAAKC,cAGlD1B,EAAW,mGAIbC,EAAYuB,EAASC,KAAKE,cAC1BzB,EAAasB,EAASC,KAAKG,gBAC3BzB,EAAYqB,EAASC,KAAKI,cAC1BzB,EAAgBoB,EAASC,KAAKK,UAC9BzB,EAAcmB,EAASC,KAAKM,QAC5BtB,GAAW,GACXE,GAAU,EACX,IACAqB,OAAM,SAAA1B,GACLC,GAAS,GACTE,GAAW,GACXE,GAAU,EACX,GACJ,CACF,GAAE,CAACH,EAASI,KAGX,0BACIF,GAiBA,SAACd,EAAA,EAAD,IAhBAU,GACE,8BAAE,qBAEF,iCACE,SAAC,KAAD,CAAMb,GAAIoB,EAAV,SAAwB,aACxB,SAAC,EAAD,CACErC,QAASA,EACTC,UAAWA,EACXC,UAAWA,EACXC,SAAUA,EACVC,aAAcA,EACdC,WAAYA,QASzB,C","sources":["components/MovieInformation/MovieInformation.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import { Link, Outlet } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Loader from 'components/Loader/Loader';\nimport { Suspense } from 'react';\n\nconst MovieInformation = ({\n  filmImg,\n  filmdDate,\n  filmTitle,\n  filmVote,\n  filmOverview,\n  filmGenres,\n}) => {\n  const releaseYear = new Date(filmdDate).getFullYear();\n  return (\n    <>\n      <div>\n        <div>\n          {filmImg ? (\n            <img src={filmImg} alt={filmTitle} />\n          ) : (\n            <p>Ops, image not found</p>\n          )}\n        </div>\n\n        <div>\n          <h1>\n            {filmTitle} ({releaseYear})\n          </h1>\n          <p>User score: {Math.round(filmVote * 10) + `%`}</p>\n        </div>\n        <div>\n          <h2>Overview</h2>\n          <p>{filmOverview}</p>\n        </div>\n        <div>\n          <h3>Genres</h3>\n          <ul>\n            {filmGenres.map(genre => (\n              <li key={genre.id}>{genre.name}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      <div>\n        <p>Additional Information</p>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n      </div>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieInformation;\n\nMovieInformation.propTypes = {\n  filmImg: PropTypes.string.isRequired,\n  filmdDate: PropTypes.string.isRequired,\n  filmTitle: PropTypes.string.isRequired,\n  filmVote: PropTypes.number.isRequired,\n  filmOverview: PropTypes.string.isRequired,\n  filmGenres: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import { useParams, useLocation, Link } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MovieInformation from 'components/MovieInformation/MovieInformation';\nimport Loader from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [filmImg, setFilmImg] = useState(``);\n  const [filmdDate, setFilmDate] = useState('');\n  const [filmTitle, setFilmTitle] = useState('');\n  const [filmVote, setFilmVote] = useState('');\n  const [filmOverview, setFilmOverview] = useState('');\n  const [filmGenres, setFilmGenres] = useState([]);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [loader, setLoader] = useState(true);\n  const responseUrl = `https://api.themoviedb.org/3/movie/${movieId}?language=en-US`;\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    if (loading) {\n      const options = {\n        method: 'GET',\n        headers: {\n          accept: 'application/json',\n          Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkZjBjOWZhNTA0MDcxMTlhOWY3MWZlMTUwMGRjZWUxMCIsInN1YiI6IjY0OWYwODcwNmY2YTk5MDEzYTg5ZjQwYyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.CNFILj_LKfHuzNXrxVFMlOf4mJknB8NFdiCkmm6wFOY',\n        },\n      };\n      axios\n        .get(responseUrl, options)\n        .then(response => {\n          if (response.data.poster_path) {\n            setFilmImg(\n              `https://image.tmdb.org/t/p/w300${response.data.poster_path}`\n            );\n          } else {\n            setFilmImg(\n              `https://www.flagstaff365.com/wp-content/themes/apollo/inc/admin/assets/images/placeholder-1.png`\n            );\n          }\n          setFilmDate(response.data.release_date);\n          setFilmTitle(response.data.original_title);\n          setFilmVote(response.data.vote_average);\n          setFilmOverview(response.data.overview);\n          setFilmGenres(response.data.genres);\n          setLoading(false);\n          setLoader(false);\n        })\n        .catch(error => {\n          setError(true);\n          setLoading(false);\n          setLoader(false);\n        });\n    }\n  }, [loading, responseUrl]);\n\n  return (\n    <main>\n      {!loader ? (\n        error ? (\n          <>Ops! Not found!</>\n        ) : (\n          <>\n            <Link to={backLinkHref}>Go back</Link>\n            <MovieInformation\n              filmImg={filmImg}\n              filmdDate={filmdDate}\n              filmTitle={filmTitle}\n              filmVote={filmVote}\n              filmOverview={filmOverview}\n              filmGenres={filmGenres}\n            />\n          </>\n        )\n      ) : (\n        <Loader />\n      )}\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["filmImg","filmdDate","filmTitle","filmVote","filmOverview","filmGenres","releaseYear","Date","getFullYear","src","alt","Math","round","map","genre","name","id","to","Suspense","fallback","Loader","movieId","useParams","useState","setFilmImg","setFilmDate","setFilmTitle","setFilmVote","setFilmOverview","setFilmGenres","error","setError","loading","setLoading","loader","setLoader","responseUrl","backLinkHref","useLocation","state","from","useEffect","axios","method","headers","accept","Authorization","then","response","data","poster_path","release_date","original_title","vote_average","overview","genres","catch"],"sourceRoot":""}